// Generated by jextract

package dev.diplomattest.somelib.ntv;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ICU4XFixedDecimalFormatterOptions {
 *     ICU4XFixedDecimalGroupingStrategy grouping_strategy;
 *     bool some_other_config;
 * }
 * }
 */
public class ICU4XFixedDecimalFormatterOptions {

    ICU4XFixedDecimalFormatterOptions() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        somelib_h.C_INT.withName("grouping_strategy"),
        somelib_h.C_BOOL.withName("some_other_config"),
        MemoryLayout.paddingLayout(3)
    ).withName("ICU4XFixedDecimalFormatterOptions");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt grouping_strategy$LAYOUT = (OfInt)$LAYOUT.select(groupElement("grouping_strategy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ICU4XFixedDecimalGroupingStrategy grouping_strategy
     * }
     */
    public static final OfInt grouping_strategy$layout() {
        return grouping_strategy$LAYOUT;
    }

    private static final long grouping_strategy$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ICU4XFixedDecimalGroupingStrategy grouping_strategy
     * }
     */
    public static final long grouping_strategy$offset() {
        return grouping_strategy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ICU4XFixedDecimalGroupingStrategy grouping_strategy
     * }
     */
    public static int grouping_strategy(MemorySegment struct) {
        return struct.get(grouping_strategy$LAYOUT, grouping_strategy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ICU4XFixedDecimalGroupingStrategy grouping_strategy
     * }
     */
    public static void grouping_strategy(MemorySegment struct, int fieldValue) {
        struct.set(grouping_strategy$LAYOUT, grouping_strategy$OFFSET, fieldValue);
    }

    private static final OfBoolean some_other_config$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("some_other_config"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool some_other_config
     * }
     */
    public static final OfBoolean some_other_config$layout() {
        return some_other_config$LAYOUT;
    }

    private static final long some_other_config$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool some_other_config
     * }
     */
    public static final long some_other_config$offset() {
        return some_other_config$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool some_other_config
     * }
     */
    public static boolean some_other_config(MemorySegment struct) {
        return struct.get(some_other_config$LAYOUT, some_other_config$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool some_other_config
     * }
     */
    public static void some_other_config(MemorySegment struct, boolean fieldValue) {
        struct.set(some_other_config$LAYOUT, some_other_config$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

