---
source: tool/src/java/mod.rs
expression: res
---
package dev.diplomattest.somelib;

import dev.diplomattest.somelib.ntv.somelib_h;

import java.lang.foreign.Arena;
import java.lang.foreign.MemorySegment;
import java.lang.ref.Cleaner;
import static java.lang.foreign.ValueLayout.*;
import java.nio.charset.StandardCharsets;

public class MyStruct {
    byte a;
    boolean b;
    byte c;
    long d;
    int e;
    int f;
    MyEnum g;
    

    MemorySegment internal;

    private MyStruct() {
    }

    static MyStruct fromSegment(MemorySegment segment) {
        var returnVal = new MyStruct();
        returnVal.internal = segment;
        returnVal.a = dev.diplomattest.somelib.ntv.MyStruct.a(segment);
        returnVal.b = dev.diplomattest.somelib.ntv.MyStruct.b(segment);
        returnVal.c = dev.diplomattest.somelib.ntv.MyStruct.c(segment);
        returnVal.d = dev.diplomattest.somelib.ntv.MyStruct.d(segment);
        returnVal.e = dev.diplomattest.somelib.ntv.MyStruct.e(segment);
        returnVal.f = dev.diplomattest.somelib.ntv.MyStruct.f(segment);
        returnVal.g = dev.diplomattest.somelib.ntv.MyStruct.g(segment);
        
        return returnVal;
    }
    
    public static MyStruct new_() {
        var nativeInvoker = somelib_h.MyStruct_new.makeInvoker();
        var nativeVal = nativeInvoker.apply();
        return new MyStruct(nativeVal);
    }
    
}


============================
package dev.diplomattest.somelib;

import dev.diplomattest.somelib.ntv.somelib_h;


import java.lang.foreign.Arena;
import java.lang.foreign.MemorySegment;
import java.lang.ref.Cleaner;
import static java.lang.foreign.ValueLayout.*;
import java.nio.charset.StandardCharsets;

public enum MyEnum {
    A,
    B,
    C,
    D,
    E,
    F,
    ;

    static MyEnum fromInt(int i) {
        switch (i) {
            case -2 -> {
                return MyEnum.A;
            }
            case -1 -> {
                return MyEnum.B;
            }
            case 0 -> {
                return MyEnum.C;
            }
            case 1 -> {
                return MyEnum.D;
            }
            case 2 -> {
                return MyEnum.E;
            }
            case 3 -> {
                return MyEnum.F;
            }
            
        }
        throw new RuntimeException("Unexpected int for MyEnum:" + i);
    }

    int toInt() {
        switch (this) {
            case A -> {
                return -2;
            }
            case B -> {
                return -1;
            }
            case C -> {
                return 0;
            }
            case D -> {
                return 1;
            }
            case E -> {
                return 2;
            }
            case F -> {
                return 3;
            }
            
        }
        throw new RuntimeException("Unexpected variant for MyEnum:" + this);
    }

    
    public static MyEnum getA() {
        var nativeInvoker = somelib_h.MyEnum_get_a.makeInvoker();
        var nativeVal = nativeInvoker.apply();
        return MyEnum.fromInt(nativeVal);
    }
    
}

============================
