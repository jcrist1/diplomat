---
source: tool/src/java/mod.rs
expression: res
---
package dev.diplomattest.somelib;

import dev.diplomattest.somelib.ntv.somelib_h;

import java.lang.foreign.Arena;
import java.lang.foreign.MemorySegment;
import java.lang.ref.Cleaner;
import java.lang.foreign.SegmentAllocator;
import java.util.List;
import static java.lang.foreign.ValueLayout.*;
import java.nio.charset.StandardCharsets;
import java.util.stream.Stream;

public class BorrowedFields {
    String a;
    String b;
    String c;
    

    MemorySegment internal;
    SegmentAllocator arena;
    List<Object> selfEdges = List.of();
    List<Object> aEdges = List.of();
    

    private BorrowedFields(SegmentAllocator arena) {
        this.arena = arena;
    }

    BorrowedFields(SegmentAllocator arena, MemorySegment structSegment, List<Object> aEdges) {
        this.arena = arena;
        this.selfEdges = selfEdges;
        this.aEdges = aEdges;
        

        this.a = SliceUtils.readUtf16(dev.diplomattest.somelib.ntv.BorrowedFields.a(structSegment));
        this.b = SliceUtils.readUtf8(dev.diplomattest.somelib.ntv.BorrowedFields.b(structSegment));
        this.c = SliceUtils.readUtf8(dev.diplomattest.somelib.ntv.BorrowedFields.c(structSegment));
        

    }
    
}


============================
package dev.diplomattest.somelib;

import dev.diplomattest.somelib.ntv.somelib_h;

import java.lang.foreign.Arena;
import java.lang.foreign.MemorySegment;
import java.lang.ref.Cleaner;
import java.lang.foreign.SegmentAllocator;
import java.util.List;
import static java.lang.foreign.ValueLayout.*;
import java.nio.charset.StandardCharsets;
import java.util.stream.Stream;

public class BorrowedFieldsReturning {
    String bytes;
    

    MemorySegment internal;
    SegmentAllocator arena;
    List<Object> selfEdges = List.of();
    List<Object> aEdges = List.of();
    

    private BorrowedFieldsReturning(SegmentAllocator arena) {
        this.arena = arena;
    }

    BorrowedFieldsReturning(SegmentAllocator arena, MemorySegment structSegment, List<Object> aEdges) {
        this.arena = arena;
        this.selfEdges = selfEdges;
        this.aEdges = aEdges;
        

        this.bytes = SliceUtils.readUtf8(dev.diplomattest.somelib.ntv.BorrowedFieldsReturning.bytes(structSegment));
        

    }
    
}


============================
package dev.diplomattest.somelib;

import dev.diplomattest.somelib.ntv.somelib_h;

import java.lang.foreign.Arena;
import java.lang.foreign.MemorySegment;
import java.lang.ref.Cleaner;
import java.lang.foreign.SegmentAllocator;
import java.util.List;
import static java.lang.foreign.ValueLayout.*;
import java.nio.charset.StandardCharsets;
import java.util.stream.Stream;

public class BorrowedFieldsWithBounds {
    String fieldA;
    String fieldB;
    String fieldC;
    

    MemorySegment internal;
    SegmentAllocator arena;
    List<Object> selfEdges = List.of();
    List<Object> aEdges = List.of();
    List<Object> bEdges = List.of();
    List<Object> cEdges = List.of();
    

    private BorrowedFieldsWithBounds(SegmentAllocator arena) {
        this.arena = arena;
    }

    BorrowedFieldsWithBounds(SegmentAllocator arena, MemorySegment structSegment, List<Object> aEdges, List<Object> bEdges, List<Object> cEdges) {
        this.arena = arena;
        this.selfEdges = selfEdges;
        this.aEdges = aEdges;
        this.bEdges = bEdges;
        this.cEdges = cEdges;
        

        this.fieldA = SliceUtils.readUtf16(dev.diplomattest.somelib.ntv.BorrowedFieldsWithBounds.field_a(structSegment));
        this.fieldB = SliceUtils.readUtf8(dev.diplomattest.somelib.ntv.BorrowedFieldsWithBounds.field_b(structSegment));
        this.fieldC = SliceUtils.readUtf8(dev.diplomattest.somelib.ntv.BorrowedFieldsWithBounds.field_c(structSegment));
        

    }
    
}


============================
package dev.diplomattest.somelib;

import dev.diplomattest.somelib.ntv.*;


import java.lang.foreign.Arena;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.ref.Cleaner;
import java.util.List;
import static java.lang.foreign.ValueLayout.*;
import java.nio.charset.StandardCharsets;
import java.util.stream.Stream;

public class Bar {

    MemorySegment internal;
    Cleaner.Cleanable cleanable;

    List<Object> selfEdges = List.of();
    List<Object> bEdges = List.of();
    List<Object> aEdges = List.of();
    

    static class BarCleaner implements Runnable {

        MemorySegment segment;
        BarCleaner(MemorySegment segment) {
            this.segment = segment;
        }

        public void run() {
            somelib_h.Bar_destroy(this.segment);
        }
    }

    Bar() {}
    Bar(MemorySegment handle, List<Object> selfEdges, List<Object> bEdges, List<Object> aEdges) {
        this.internal = handle;
        this.selfEdges = selfEdges;
        this.bEdges = bEdges;
        this.aEdges = aEdges;
        

    }
    
    
}
============================
package dev.diplomattest.somelib;

import dev.diplomattest.somelib.ntv.*;


import java.lang.foreign.Arena;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.ref.Cleaner;
import java.util.List;
import static java.lang.foreign.ValueLayout.*;
import java.nio.charset.StandardCharsets;
import java.util.stream.Stream;

public class Foo {

    MemorySegment internal;
    Cleaner.Cleanable cleanable;

    List<Object> selfEdges = List.of();
    List<Object> aEdges = List.of();
    

    static class FooCleaner implements Runnable {

        MemorySegment segment;
        FooCleaner(MemorySegment segment) {
            this.segment = segment;
        }

        public void run() {
            somelib_h.Foo_destroy(this.segment);
        }
    }

    Foo() {}
    Foo(MemorySegment handle, List<Object> selfEdges, List<Object> aEdges) {
        this.internal = handle;
        this.selfEdges = selfEdges;
        this.aEdges = aEdges;
        

    }
    
    public static Foo new_(String x) {
        
        try (var arena = Arena.ofConfined()) {
            var xMemSeg = arena.allocateFrom(x, StandardCharsets.UTF_8);
            var xLen = xMemSeg.byteSize();
            var nativeVal = somelib_h.Foo_new(xMemSeg, xLen - 1);
            List<Object> selfEdges = List.of();
            
            
            
            List<Object> aEdges = List.of(x);
            var returnVal = new Foo(nativeVal, selfEdges, aEdges);
            var cleaner = new Foo.FooCleaner(nativeVal);
            returnVal.cleanable = Lib.cleaner.register(returnVal, cleaner);
            return returnVal;
        }
    }
    
    public static Foo newStatic(String x) {
        
        try (var arena = Arena.ofConfined()) {
            var xMemSeg = arena.allocateFrom(x, StandardCharsets.UTF_8);
            var xLen = xMemSeg.byteSize();
            var nativeVal = somelib_h.Foo_new_static(xMemSeg, xLen - 1);
            List<Object> selfEdges = List.of();
            
            
            
            List<Object> aEdges = List.of();
            var returnVal = new Foo(nativeVal, selfEdges, aEdges);
            var cleaner = new Foo.FooCleaner(nativeVal);
            returnVal.cleanable = Lib.cleaner.register(returnVal, cleaner);
            return returnVal;
        }
    }
    
    public static Foo extractFromFields(BorrowedFields fields) {
        
        var fieldsNative = fields.internal;
        var nativeVal = somelib_h.Foo_extract_from_fields(fieldsNative);
        List<Object> selfEdges = List.of();
        
        
        
        List<Object> aEdges = List.of(fields);
        var returnVal = new Foo(nativeVal, selfEdges, aEdges);
        var cleaner = new Foo.FooCleaner(nativeVal);
        returnVal.cleanable = Lib.cleaner.register(returnVal, cleaner);
        return returnVal;
    }
    
    public static Foo extractFromBounds(BorrowedFieldsWithBounds bounds,String anotherString) {
        
        try (var arena = Arena.ofConfined()) {
            var boundsNative = bounds.internal;
            var anotherStringMemSeg = arena.allocateFrom(anotherString, StandardCharsets.UTF_8);
            var anotherStringLen = anotherStringMemSeg.byteSize();
            var nativeVal = somelib_h.Foo_extract_from_bounds(boundsNative, anotherStringMemSeg, anotherStringLen - 1);
            List<Object> selfEdges = List.of();
            
            
            
            List<Object> aEdges = List.of(bounds, bounds, anotherString);
            var returnVal = new Foo(nativeVal, selfEdges, aEdges);
            var cleaner = new Foo.FooCleaner(nativeVal);
            returnVal.cleanable = Lib.cleaner.register(returnVal, cleaner);
            return returnVal;
        }
    }
    
    
    public Bar getBar() {
        
        
        var nativeVal = somelib_h.Foo_get_bar(internal);
        List<Object> selfEdges = List.of();
        
        
        
        List<Object> bEdges = List.of(this);
        List<Object> aEdges = List.of(this);
        var returnVal = new Bar(nativeVal, selfEdges, bEdges, aEdges);
        var cleaner = new Bar.BarCleaner(nativeVal);
        returnVal.cleanable = Lib.cleaner.register(returnVal, cleaner);
        return returnVal;
    }
    
    public BorrowedFieldsReturning asReturning() {
        
        var returnArena = (SegmentAllocator) Arena.ofAuto();
        
        var nativeVal = somelib_h.Foo_as_returning(returnArena, internal);
        
        List<Object> aEdges = List.of(this);
        
        var returnVal = new BorrowedFieldsReturning(returnArena, nativeVal, aEdges);
        return returnVal;
    }
    
}
============================
