package {{domain}}.{{lib_name}}

import com.sun.jna.Library
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure

internal interface {{type_name}}Lib: Library {

    {%- for m in native_methods %}
    {{m.declaration}}
    {%- endfor %}
}

class {{type_name}}Native: Structure(), Structure.ByValue {
    {%- for field in fields %}
    @JvmField
    var {{field.name}}: {{field.ffi_cast_type_name}} = {{field.ffi_type_default}};
    {%- endfor %}
  
    // Define the fields of the struct
    override fun getFieldOrder(): List<String> {
        return listOf({% for field in fields %}{% if loop.first %}{% else %}, {% endif %}"{{field.name}}"{% endfor %})
    }
}

class {{type_name}} internal constructor (
    internal val nativeStruct: {{type_name}}Native{% if !lifetimes.is_empty() %},
    {%- for lt in lifetimes %}
    internal val {{lt}}Edges: List<Any>{% if !loop.last%},{% endif %}
    {%- endfor %}
    {% endif -%}
    ) {

    {%- for field in fields %}
    val {{field.name}}: {{field.field_type}} = {{field.native_to_kt}}
    {%- endfor %}

    companion object {
        internal val libClass: Class<{{type_name}}Lib> = {{type_name}}Lib::class.java
        internal val lib: {{type_name}}Lib = Native.load("somelib", libClass)
        val NATIVESIZE: Long = Native.getNativeSize({{type_name}}Native::class.java).toLong()
{%- for m in companion_methods %}{{m|indent(8)}}{%- endfor %}
    }

{%- for m in self_methods %}{{m|indent(4)}}{%- endfor %}

}

